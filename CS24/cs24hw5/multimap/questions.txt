Multimap Caching Performance
============================

a)  Size of hardware cache lines:



b)  Output of mmperf:



c)  Explanation of tests:



e)  Explanation of your optimizations:



f)  Output of ommperf:



This program measures multimap read performance by doing the following, for
various kinds of usage patterns:

 * First, a large number of randomly generated (key, value) pairs are inserted
   into an empty multimap.

 * Next, more (key, value) pairs are randomly generated, and the multimap is
   probed to see if each pair is in the map.  The amount of wall-clock time
   taken for this step is measured and used to estimate the time-per-probe
   of the map.

 * Finally, the program prints out how many of the generated (key, value) pairs
   were in the map.  This number should not change regardless of optimizations
   to the data structure, because the same random seed is always used at the
   start of the program.

Testing multimap performance:  300000 pairs, 1000000 probes, random keys.
Adding 300000 randomly generated pairs to multimap.
Keys in range [0, 50), values in range [0, 1000).
Probing multimap 1000000 times with randomly generated test-pairs.
Keys in range [0, 50), values in range [0, 1000).
997144 out of 1000000 test-pairs were in the map (99.7%)
Total wall-clock time:  30.25 seconds		μs per probe:  30.251 μs

Testing multimap performance:  300000 pairs, 1000000 probes, incrementing keys.
Adding 300000 randomly generated pairs to multimap.
Keys in range [0, 50), values in range [0, 1000).
Probing multimap 1000000 times with randomly generated test-pairs.
Keys in range [0, 50), values in range [0, 1000).
997715 out of 1000000 test-pairs were in the map (99.8%)
Total wall-clock time:  64.87 seconds		μs per probe:  64.866 μs

Testing multimap performance:  300000 pairs, 1000000 probes, decrementing keys.
Adding 300000 randomly generated pairs to multimap.
Keys in range [0, 50), values in range [0, 1000).
Probing multimap 1000000 times with randomly generated test-pairs.
Keys in range [0, 50), values in range [0, 1000).
997325 out of 1000000 test-pairs were in the map (99.7%)
Total wall-clock time:  64.70 seconds		μs per probe:  64.703 μs

Testing multimap performance:  15000000 pairs, 1000000 probes, random keys.
Adding 15000000 randomly generated pairs to multimap.
Keys in range [0, 100000), values in range [0, 50).
Probing multimap 1000000 times with randomly generated test-pairs.
Keys in range [0, 100000), values in range [0, 50).
949586 out of 1000000 test-pairs were in the map (95.0%)
Total wall-clock time:  6.77 seconds		μs per probe:  6.775 μs

Testing multimap performance:  100000 pairs, 50000 probes, incrementing keys.
Adding 100000 randomly generated pairs to multimap.
Keys in range [0, 100000), values in range [0, 50).
Probing multimap 50000 times with randomly generated test-pairs.
Keys in range [0, 100000), values in range [0, 50).
976 out of 50000 test-pairs were in the map (2.0%)
Total wall-clock time:  236.40 seconds		μs per probe:  4728.022 μs

Testing multimap performance:  100000 pairs, 50000 probes, decrementing keys.
Adding 100000 randomly generated pairs to multimap.
Keys in range [0, 100000), values in range [0, 50).
Probing multimap 50000 times with randomly generated test-pairs.
Keys in range [0, 100000), values in range [0, 50).
980 out of 50000 test-pairs were in the map (2.0%)
Total wall-clock time:  223.60 seconds		μs per probe:  4471.999 μs

