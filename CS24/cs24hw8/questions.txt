Answers to HW8 Questions
========================

a)  How to detect when a page is accessed?
    when we get a seg fault with code SEGV_ACCERR. Once we get this error,
    the segfault handler will elevate the permission on that page based
    on the current permission (i.e. NONE -> READ, READ -> RDWR, since
    we assume that the current permission must not be enough). Afterwards
    we will update the page access bit flag which will now tell us that it 
    has been accessed.

b)  How to detect when a page becomes dirty?
    when we get a segfault with code SEGV_ACCERR, then we 
    read the state of the page and we see that it has permission of read,
    implying that we need more than just read, we need write, which means
    once we grant write privileges, the page will become dirty.

f)  Page-load rate of "test_matrix -m 1024 1000" using RANDOM policy:
    ./test_matrix -m 1024 1000
    

    Total page loads:  52695

g)  Page Replacement Policy #1 (fill in the information below)

Name of policy you chose to implement:  FIFO eviction policy

Below, give the command-line for invoking the matrix-test program for a
1000x1000 matrix, with a maximum of 1024 resident pages.  (If multiple
steps are required, list them all here.)

  >>>  ./test_matrix_fifo -m 1024 1000

Total page loads:  47944

Give the resulting page-load rate of the above command:  

If you have any additional information to share about your policy, please
share it here.  Please keep your comments brief; you don't need to repeat
what the assignment says about the policy here.


h)  Page Replacement Policy #2 (if you implemented two policies)

Name of policy you chose to implement:  CLRU

Below, give the command-line for invoking the matrix-test program for a
1000x1000 matrix, with a maximum of 1024 resident pages.  (If multiple
steps are required, list them all here.)

  >>> ./test_matrix_clru -m 1024 1000

Total page loads:  6825

Give the resulting page-load rate of the above command:  

If you have any additional information to share about your policy, please
share it here.  Please keep your comments brief; you don't need to repeat
what the assignment says about the policy here.

i) Page Replacement Policy #2 (if you implemented two policies)

Name of policy you chose to implement:  Aging

Below, give the command-line for invoking the matrix-test program for a
1000x1000 matrix, with a maximum of 1024 resident pages.  (If multiple
steps are required, list them all here.)

  >>> ./test_matrix_aging -m 1024 1000

Total page loads:  6825

Give the resulting page-load rate of the above command:  

If you have any additional information to share about your policy, please
share it here.  Please keep your comments brief; you don't need to repeat
what the assignment says about the policy here.

I designed this policy to be flexible such that we can use different number
of bits to memorize the age of each page. The way this is accomplished is 
that the type we use in our queuenode for keeping track of time is a custom
defined typedef called TIMEBIT, which is typed defed in queue.h. This 
MACRO allows TIMEBIT to be either uint32_t, uint16_t, etc. At compile time,
we then compute how many bits our mask needs to be by using sizeof().*(note
all types must be unsigned) 

Thus, to use different number of bits in the time run, simply head to
queue.h and change the typedef according to the instructions given here and
there.

Below are the runs with their respective page loads.

32 bit run
Total page loads:  16157

16 bit run

Total page loads:  10087

8 bit run

Total page loads:  6825









